type @ref { }
type @types { typeBase:typeBase }
type @typeDefs { typeDefBase:typeDef  }
type typeDefBase {ref:ref types:types }
type typeDef:typeDefBase { ref:superType }
type @functions {  function:function }
type function { ref:ref types:types code:code }
type code {}
type @codes {  code:code }
type objet:code { ref:ref codes:params }
type atom:code { ref:ref ref:valeur }
type appel:code { }
type appelRec:appel { appel:appel  code:param }

type freeRef: code {ref:ref }
type refFonction:appel{}
type refLocal:appel {}

type si:code { code:test ref:tp code:alors code:sinon }
type typeBase {}
type tpObjet:typeBase { ref:ref }
type tpFunction:typeBase  { typeBase:param typeBase:tpReturn  } 
type acces :code {  code:code ref:ref }
type univers:code {}
type universDef  { functions:functions typeDefs:typeDefs }
type expression { types:types  code:code  ref:tp }





 


 

	


