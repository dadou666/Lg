// Generated from src\grammaire\lg.g4 by ANTLR 4.0
package grammaire;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class lgLexer extends Lexer {
	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__33=1, T__32=2, T__31=3, T__30=4, T__29=5, T__28=6, T__27=7, T__26=8, 
		T__25=9, T__24=10, T__23=11, T__22=12, T__21=13, T__20=14, T__19=15, T__18=16, 
		T__17=17, T__16=18, T__15=19, T__14=20, T__13=21, T__12=22, T__11=23, 
		T__10=24, T__9=25, T__8=26, T__7=27, T__6=28, T__5=29, T__4=30, T__3=31, 
		T__2=32, T__1=33, T__0=34, ENTIER=35, ID=36, WS=37;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"<INVALID>",
		"'/'", "'{'", "'='", "'}'", "'if'", "'$'", "'All'", "'&'", "'('", "'is'", 
		"'predicat'", "'*'", "'.'", "'->'", "'abstract'", "'const'", "':'", "'['", 
		"'|'", "'<'", "']'", "'>'", "'type'", "'!'", "'=>'", "'#'", "'Exist'", 
		"'%'", "'else'", "'function'", "')'", "'then'", "'+'", "'-'", "ENTIER", 
		"ID", "WS"
	};
	public static final String[] ruleNames = {
		"T__33", "T__32", "T__31", "T__30", "T__29", "T__28", "T__27", "T__26", 
		"T__25", "T__24", "T__23", "T__22", "T__21", "T__20", "T__19", "T__18", 
		"T__17", "T__16", "T__15", "T__14", "T__13", "T__12", "T__11", "T__10", 
		"T__9", "T__8", "T__7", "T__6", "T__5", "T__4", "T__3", "T__2", "T__1", 
		"T__0", "ENTIER", "ID", "WS"
	};


	public lgLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "lg.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	@Override
	public void action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 36: WS_action((RuleContext)_localctx, actionIndex); break;
		}
	}
	private void WS_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0: skip();  break;
		}
	}

	public static final String _serializedATN =
		"\2\4\'\u00d4\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t"+
		"\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20"+
		"\t\20\4\21\t\21\4\22\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27"+
		"\t\27\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36"+
		"\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\3\2\3\2\3"+
		"\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\6\3\7\3\7\3\b\3\b\3\b\3\b\3\t\3\t\3\n"+
		"\3\n\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\16\3"+
		"\16\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\21\3"+
		"\21\3\21\3\21\3\21\3\21\3\22\3\22\3\23\3\23\3\24\3\24\3\25\3\25\3\26\3"+
		"\26\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3\32\3\32\3\32\3\33\3"+
		"\33\3\34\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3"+
		"\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3 \3 \3!\3!\3!\3!\3!\3\"\3"+
		"\"\3#\3#\3$\3$\7$\u00c0\n$\f$\16$\u00c3\13$\3$\3$\3%\3%\7%\u00c9\n%\f"+
		"%\16%\u00cc\13%\3&\6&\u00cf\n&\r&\16&\u00d0\3&\3&\2\'\3\3\1\5\4\1\7\5"+
		"\1\t\6\1\13\7\1\r\b\1\17\t\1\21\n\1\23\13\1\25\f\1\27\r\1\31\16\1\33\17"+
		"\1\35\20\1\37\21\1!\22\1#\23\1%\24\1\'\25\1)\26\1+\27\1-\30\1/\31\1\61"+
		"\32\1\63\33\1\65\34\1\67\35\19\36\1;\37\1= \1?!\1A\"\1C#\1E$\1G%\1I&\1"+
		"K\'\2\3\2\7\3\63;\3\62;\4C\\c|\6\62;C\\aac|\5\13\f\17\17\"\"\u00d6\2\3"+
		"\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2"+
		"\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31"+
		"\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2"+
		"\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2"+
		"\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2"+
		"\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2"+
		"I\3\2\2\2\2K\3\2\2\2\3M\3\2\2\2\5O\3\2\2\2\7Q\3\2\2\2\tS\3\2\2\2\13U\3"+
		"\2\2\2\rX\3\2\2\2\17Z\3\2\2\2\21^\3\2\2\2\23`\3\2\2\2\25b\3\2\2\2\27e"+
		"\3\2\2\2\31n\3\2\2\2\33p\3\2\2\2\35r\3\2\2\2\37u\3\2\2\2!~\3\2\2\2#\u0084"+
		"\3\2\2\2%\u0086\3\2\2\2\'\u0088\3\2\2\2)\u008a\3\2\2\2+\u008c\3\2\2\2"+
		"-\u008e\3\2\2\2/\u0090\3\2\2\2\61\u0095\3\2\2\2\63\u0097\3\2\2\2\65\u009a"+
		"\3\2\2\2\67\u009c\3\2\2\29\u00a2\3\2\2\2;\u00a4\3\2\2\2=\u00a9\3\2\2\2"+
		"?\u00b2\3\2\2\2A\u00b4\3\2\2\2C\u00b9\3\2\2\2E\u00bb\3\2\2\2G\u00bd\3"+
		"\2\2\2I\u00c6\3\2\2\2K\u00ce\3\2\2\2MN\7\61\2\2N\4\3\2\2\2OP\7}\2\2P\6"+
		"\3\2\2\2QR\7?\2\2R\b\3\2\2\2ST\7\177\2\2T\n\3\2\2\2UV\7k\2\2VW\7h\2\2"+
		"W\f\3\2\2\2XY\7&\2\2Y\16\3\2\2\2Z[\7C\2\2[\\\7n\2\2\\]\7n\2\2]\20\3\2"+
		"\2\2^_\7(\2\2_\22\3\2\2\2`a\7*\2\2a\24\3\2\2\2bc\7k\2\2cd\7u\2\2d\26\3"+
		"\2\2\2ef\7r\2\2fg\7t\2\2gh\7g\2\2hi\7f\2\2ij\7k\2\2jk\7e\2\2kl\7c\2\2"+
		"lm\7v\2\2m\30\3\2\2\2no\7,\2\2o\32\3\2\2\2pq\7\60\2\2q\34\3\2\2\2rs\7"+
		"/\2\2st\7@\2\2t\36\3\2\2\2uv\7c\2\2vw\7d\2\2wx\7u\2\2xy\7v\2\2yz\7t\2"+
		"\2z{\7c\2\2{|\7e\2\2|}\7v\2\2} \3\2\2\2~\177\7e\2\2\177\u0080\7q\2\2\u0080"+
		"\u0081\7p\2\2\u0081\u0082\7u\2\2\u0082\u0083\7v\2\2\u0083\"\3\2\2\2\u0084"+
		"\u0085\7<\2\2\u0085$\3\2\2\2\u0086\u0087\7]\2\2\u0087&\3\2\2\2\u0088\u0089"+
		"\7~\2\2\u0089(\3\2\2\2\u008a\u008b\7>\2\2\u008b*\3\2\2\2\u008c\u008d\7"+
		"_\2\2\u008d,\3\2\2\2\u008e\u008f\7@\2\2\u008f.\3\2\2\2\u0090\u0091\7v"+
		"\2\2\u0091\u0092\7{\2\2\u0092\u0093\7r\2\2\u0093\u0094\7g\2\2\u0094\60"+
		"\3\2\2\2\u0095\u0096\7#\2\2\u0096\62\3\2\2\2\u0097\u0098\7?\2\2\u0098"+
		"\u0099\7@\2\2\u0099\64\3\2\2\2\u009a\u009b\7%\2\2\u009b\66\3\2\2\2\u009c"+
		"\u009d\7G\2\2\u009d\u009e\7z\2\2\u009e\u009f\7k\2\2\u009f\u00a0\7u\2\2"+
		"\u00a0\u00a1\7v\2\2\u00a18\3\2\2\2\u00a2\u00a3\7\'\2\2\u00a3:\3\2\2\2"+
		"\u00a4\u00a5\7g\2\2\u00a5\u00a6\7n\2\2\u00a6\u00a7\7u\2\2\u00a7\u00a8"+
		"\7g\2\2\u00a8<\3\2\2\2\u00a9\u00aa\7h\2\2\u00aa\u00ab\7w\2\2\u00ab\u00ac"+
		"\7p\2\2\u00ac\u00ad\7e\2\2\u00ad\u00ae\7v\2\2\u00ae\u00af\7k\2\2\u00af"+
		"\u00b0\7q\2\2\u00b0\u00b1\7p\2\2\u00b1>\3\2\2\2\u00b2\u00b3\7+\2\2\u00b3"+
		"@\3\2\2\2\u00b4\u00b5\7v\2\2\u00b5\u00b6\7j\2\2\u00b6\u00b7\7g\2\2\u00b7"+
		"\u00b8\7p\2\2\u00b8B\3\2\2\2\u00b9\u00ba\7-\2\2\u00baD\3\2\2\2\u00bb\u00bc"+
		"\7/\2\2\u00bcF\3\2\2\2\u00bd\u00c1\t\2\2\2\u00be\u00c0\t\3\2\2\u00bf\u00be"+
		"\3\2\2\2\u00c0\u00c3\3\2\2\2\u00c1\u00bf\3\2\2\2\u00c1\u00c2\3\2\2\2\u00c2"+
		"\u00c4\3\2\2\2\u00c3\u00c1\3\2\2\2\u00c4\u00c5\5I%\2\u00c5H\3\2\2\2\u00c6"+
		"\u00ca\t\4\2\2\u00c7\u00c9\t\5\2\2\u00c8\u00c7\3\2\2\2\u00c9\u00cc\3\2"+
		"\2\2\u00ca\u00c8\3\2\2\2\u00ca\u00cb\3\2\2\2\u00cbJ\3\2\2\2\u00cc\u00ca"+
		"\3\2\2\2\u00cd\u00cf\t\6\2\2\u00ce\u00cd\3\2\2\2\u00cf\u00d0\3\2\2\2\u00d0"+
		"\u00ce\3\2\2\2\u00d0\u00d1\3\2\2\2\u00d1\u00d2\3\2\2\2\u00d2\u00d3\b&"+
		"\2\2\u00d3L\3\2\2\2\6\2\u00c1\u00ca\u00d0";
	public static final ATN _ATN =
		ATNSimulator.deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
	}
}