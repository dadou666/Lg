// Generated from src\grammaire\lg.g4 by ANTLR 4.0
package grammaire;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class lgLexer extends Lexer {
	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__34=1, T__33=2, T__32=3, T__31=4, T__30=5, T__29=6, T__28=7, T__27=8, 
		T__26=9, T__25=10, T__24=11, T__23=12, T__22=13, T__21=14, T__20=15, T__19=16, 
		T__18=17, T__17=18, T__16=19, T__15=20, T__14=21, T__13=22, T__12=23, 
		T__11=24, T__10=25, T__9=26, T__8=27, T__7=28, T__6=29, T__5=30, T__4=31, 
		T__3=32, T__2=33, T__1=34, T__0=35, ENTIER=36, ENTIER_EXTERNE=37, ID=38, 
		WS=39;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"<INVALID>",
		"'/'", "'{'", "'='", "'}'", "'if'", "'$'", "'All'", "'&'", "'('", "'is'", 
		"'predicat'", "'*'", "'.'", "'->'", "'abstract'", "'const'", "':'", "'['", 
		"'|'", "'<'", "']'", "'>'", "'@'", "'type'", "'!'", "'=>'", "'#'", "'Exist'", 
		"'%'", "'else'", "'function'", "')'", "'then'", "'+'", "'-'", "ENTIER", 
		"ENTIER_EXTERNE", "ID", "WS"
	};
	public static final String[] ruleNames = {
		"T__34", "T__33", "T__32", "T__31", "T__30", "T__29", "T__28", "T__27", 
		"T__26", "T__25", "T__24", "T__23", "T__22", "T__21", "T__20", "T__19", 
		"T__18", "T__17", "T__16", "T__15", "T__14", "T__13", "T__12", "T__11", 
		"T__10", "T__9", "T__8", "T__7", "T__6", "T__5", "T__4", "T__3", "T__2", 
		"T__1", "T__0", "ENTIER", "ENTIER_EXTERNE", "ID", "WS"
	};


	public lgLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "lg.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	@Override
	public void action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 38: WS_action((RuleContext)_localctx, actionIndex); break;
		}
	}
	private void WS_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0: skip();  break;
		}
	}

	public static final String _serializedATN =
		"\2\4)\u00eb\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t"+
		"\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20"+
		"\t\20\4\21\t\21\4\22\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27"+
		"\t\27\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36"+
		"\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4"+
		"(\t(\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\6\3\7\3\7\3\b\3\b\3\b\3"+
		"\b\3\t\3\t\3\n\3\n\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f"+
		"\3\r\3\r\3\16\3\16\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3"+
		"\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\23\3\23\3\24\3\24\3"+
		"\25\3\25\3\26\3\26\3\27\3\27\3\30\3\30\3\31\3\31\3\31\3\31\3\31\3\32\3"+
		"\32\3\33\3\33\3\33\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\35\3\36\3\36\3"+
		"\37\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3 \3 \3 \3 \3 \3!\3!\3\"\3\"\3\"\3"+
		"\"\3\"\3#\3#\3$\3$\3%\3%\7%\u00c6\n%\f%\16%\u00c9\13%\3%\3%\3%\3%\5%\u00cf"+
		"\n%\3&\3&\7&\u00d3\n&\f&\16&\u00d6\13&\3&\3&\3&\3&\5&\u00dc\n&\3\'\3\'"+
		"\7\'\u00e0\n\'\f\'\16\'\u00e3\13\'\3(\6(\u00e6\n(\r(\16(\u00e7\3(\3(\2"+
		")\3\3\1\5\4\1\7\5\1\t\6\1\13\7\1\r\b\1\17\t\1\21\n\1\23\13\1\25\f\1\27"+
		"\r\1\31\16\1\33\17\1\35\20\1\37\21\1!\22\1#\23\1%\24\1\'\25\1)\26\1+\27"+
		"\1-\30\1/\31\1\61\32\1\63\33\1\65\34\1\67\35\19\36\1;\37\1= \1?!\1A\""+
		"\1C#\1E$\1G%\1I&\1K\'\1M(\1O)\2\3\2\t\3\63;\3\62;\3\63;\3\62;\5C\\aac"+
		"|\6\62;C\\aac|\5\13\f\17\17\"\"\u00f0\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2"+
		"\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2"+
		"\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3"+
		"\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3"+
		"\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65"+
		"\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3"+
		"\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2"+
		"\2\2O\3\2\2\2\3Q\3\2\2\2\5S\3\2\2\2\7U\3\2\2\2\tW\3\2\2\2\13Y\3\2\2\2"+
		"\r\\\3\2\2\2\17^\3\2\2\2\21b\3\2\2\2\23d\3\2\2\2\25f\3\2\2\2\27i\3\2\2"+
		"\2\31r\3\2\2\2\33t\3\2\2\2\35v\3\2\2\2\37y\3\2\2\2!\u0082\3\2\2\2#\u0088"+
		"\3\2\2\2%\u008a\3\2\2\2\'\u008c\3\2\2\2)\u008e\3\2\2\2+\u0090\3\2\2\2"+
		"-\u0092\3\2\2\2/\u0094\3\2\2\2\61\u0096\3\2\2\2\63\u009b\3\2\2\2\65\u009d"+
		"\3\2\2\2\67\u00a0\3\2\2\29\u00a2\3\2\2\2;\u00a8\3\2\2\2=\u00aa\3\2\2\2"+
		"?\u00af\3\2\2\2A\u00b8\3\2\2\2C\u00ba\3\2\2\2E\u00bf\3\2\2\2G\u00c1\3"+
		"\2\2\2I\u00c3\3\2\2\2K\u00d0\3\2\2\2M\u00dd\3\2\2\2O\u00e5\3\2\2\2QR\7"+
		"\61\2\2R\4\3\2\2\2ST\7}\2\2T\6\3\2\2\2UV\7?\2\2V\b\3\2\2\2WX\7\177\2\2"+
		"X\n\3\2\2\2YZ\7k\2\2Z[\7h\2\2[\f\3\2\2\2\\]\7&\2\2]\16\3\2\2\2^_\7C\2"+
		"\2_`\7n\2\2`a\7n\2\2a\20\3\2\2\2bc\7(\2\2c\22\3\2\2\2de\7*\2\2e\24\3\2"+
		"\2\2fg\7k\2\2gh\7u\2\2h\26\3\2\2\2ij\7r\2\2jk\7t\2\2kl\7g\2\2lm\7f\2\2"+
		"mn\7k\2\2no\7e\2\2op\7c\2\2pq\7v\2\2q\30\3\2\2\2rs\7,\2\2s\32\3\2\2\2"+
		"tu\7\60\2\2u\34\3\2\2\2vw\7/\2\2wx\7@\2\2x\36\3\2\2\2yz\7c\2\2z{\7d\2"+
		"\2{|\7u\2\2|}\7v\2\2}~\7t\2\2~\177\7c\2\2\177\u0080\7e\2\2\u0080\u0081"+
		"\7v\2\2\u0081 \3\2\2\2\u0082\u0083\7e\2\2\u0083\u0084\7q\2\2\u0084\u0085"+
		"\7p\2\2\u0085\u0086\7u\2\2\u0086\u0087\7v\2\2\u0087\"\3\2\2\2\u0088\u0089"+
		"\7<\2\2\u0089$\3\2\2\2\u008a\u008b\7]\2\2\u008b&\3\2\2\2\u008c\u008d\7"+
		"~\2\2\u008d(\3\2\2\2\u008e\u008f\7>\2\2\u008f*\3\2\2\2\u0090\u0091\7_"+
		"\2\2\u0091,\3\2\2\2\u0092\u0093\7@\2\2\u0093.\3\2\2\2\u0094\u0095\7B\2"+
		"\2\u0095\60\3\2\2\2\u0096\u0097\7v\2\2\u0097\u0098\7{\2\2\u0098\u0099"+
		"\7r\2\2\u0099\u009a\7g\2\2\u009a\62\3\2\2\2\u009b\u009c\7#\2\2\u009c\64"+
		"\3\2\2\2\u009d\u009e\7?\2\2\u009e\u009f\7@\2\2\u009f\66\3\2\2\2\u00a0"+
		"\u00a1\7%\2\2\u00a18\3\2\2\2\u00a2\u00a3\7G\2\2\u00a3\u00a4\7z\2\2\u00a4"+
		"\u00a5\7k\2\2\u00a5\u00a6\7u\2\2\u00a6\u00a7\7v\2\2\u00a7:\3\2\2\2\u00a8"+
		"\u00a9\7\'\2\2\u00a9<\3\2\2\2\u00aa\u00ab\7g\2\2\u00ab\u00ac\7n\2\2\u00ac"+
		"\u00ad\7u\2\2\u00ad\u00ae\7g\2\2\u00ae>\3\2\2\2\u00af\u00b0\7h\2\2\u00b0"+
		"\u00b1\7w\2\2\u00b1\u00b2\7p\2\2\u00b2\u00b3\7e\2\2\u00b3\u00b4\7v\2\2"+
		"\u00b4\u00b5\7k\2\2\u00b5\u00b6\7q\2\2\u00b6\u00b7\7p\2\2\u00b7@\3\2\2"+
		"\2\u00b8\u00b9\7+\2\2\u00b9B\3\2\2\2\u00ba\u00bb\7v\2\2\u00bb\u00bc\7"+
		"j\2\2\u00bc\u00bd\7g\2\2\u00bd\u00be\7p\2\2\u00beD\3\2\2\2\u00bf\u00c0"+
		"\7-\2\2\u00c0F\3\2\2\2\u00c1\u00c2\7/\2\2\u00c2H\3\2\2\2\u00c3\u00c7\t"+
		"\2\2\2\u00c4\u00c6\t\3\2\2\u00c5\u00c4\3\2\2\2\u00c6\u00c9\3\2\2\2\u00c7"+
		"\u00c5\3\2\2\2\u00c7\u00c8\3\2\2\2\u00c8\u00ca\3\2\2\2\u00c9\u00c7\3\2"+
		"\2\2\u00ca\u00ce\5M\'\2\u00cb\u00cc\7&\2\2\u00cc\u00cf\5M\'\2\u00cd\u00cf"+
		"\3\2\2\2\u00ce\u00cb\3\2\2\2\u00ce\u00cd\3\2\2\2\u00cfJ\3\2\2\2\u00d0"+
		"\u00d4\t\4\2\2\u00d1\u00d3\t\5\2\2\u00d2\u00d1\3\2\2\2\u00d3\u00d6\3\2"+
		"\2\2\u00d4\u00d2\3\2\2\2\u00d4\u00d5\3\2\2\2\u00d5\u00d7\3\2\2\2\u00d6"+
		"\u00d4\3\2\2\2\u00d7\u00db\5M\'\2\u00d8\u00d9\7&\2\2\u00d9\u00dc\5M\'"+
		"\2\u00da\u00dc\3\2\2\2\u00db\u00d8\3\2\2\2\u00db\u00da\3\2\2\2\u00dcL"+
		"\3\2\2\2\u00dd\u00e1\t\6\2\2\u00de\u00e0\t\7\2\2\u00df\u00de\3\2\2\2\u00e0"+
		"\u00e3\3\2\2\2\u00e1\u00df\3\2\2\2\u00e1\u00e2\3\2\2\2\u00e2N\3\2\2\2"+
		"\u00e3\u00e1\3\2\2\2\u00e4\u00e6\t\b\2\2\u00e5\u00e4\3\2\2\2\u00e6\u00e7"+
		"\3\2\2\2\u00e7\u00e5\3\2\2\2\u00e7\u00e8\3\2\2\2\u00e8\u00e9\3\2\2\2\u00e9"+
		"\u00ea\b(\2\2\u00eaP\3\2\2\2\t\2\u00c7\u00ce\u00d4\u00db\u00e1\u00e7";
	public static final ATN _ATN =
		ATNSimulator.deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
	}
}